//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Playables_PlayableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Playables.Playable), null);
		L.RegFunction("Create", Create);
		L.RegFunction("GetHandle", GetHandle);
		L.RegFunction("GetPlayableType", GetPlayableType);
		L.RegFunction("Equals", Equals);
		L.RegFunction("New", _CreateUnityEngine_Playables_Playable);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Null", get_Null, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Playables_Playable(IntPtr L)
	{
		UnityEngine.Playables.Playable obj = new UnityEngine.Playables.Playable();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Playables.PlayableGraph arg0 = StackTraits<UnityEngine.Playables.PlayableGraph>.Check(L, 1);
				UnityEngine.Playables.Playable o = UnityEngine.Playables.Playable.Create(arg0);
				ToLua.PushValue(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Playables.PlayableGraph arg0 = StackTraits<UnityEngine.Playables.PlayableGraph>.Check(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Playables.Playable o = UnityEngine.Playables.Playable.Create(arg0, arg1);
				ToLua.PushValue(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Playables.Playable.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.Playable obj = (UnityEngine.Playables.Playable)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.Playable));
			UnityEngine.Playables.PlayableHandle o = obj.GetHandle();
			ToLua.PushValue(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayableType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Playables.Playable obj = (UnityEngine.Playables.Playable)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.Playable));
			System.Type o = obj.GetPlayableType();
			ToLua.Push(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Playables.Playable obj = (UnityEngine.Playables.Playable)ToLua.CheckObject(L, 1, typeof(UnityEngine.Playables.Playable));
			UnityEngine.Playables.Playable arg0 = StackTraits<UnityEngine.Playables.Playable>.Check(L, 2);
			bool o = obj.Equals(arg0);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Null(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Playables.Playable.Null);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

